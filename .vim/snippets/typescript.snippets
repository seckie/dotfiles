# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1}(${2}) {
		${3:}
	}${4}
# Anonymous Function
snippet f
	function (${1}) {
		${2}
	}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i}=0,l=${1:Things}.length; $2<l ; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
snippet $
	$('${1}').${2}
snippet /*
	/**
	 * ${1}
	 */
	${2}
snippet /*-
	/* ${1}
	 * ----------------------------------------*/
	${2}
snippet /**
	 /** ${1}
	  * ----------------------------------------*/
	${2}
snippet /***
	  /*** ${1}
	   * ----------------------------------------*/
	${2}
snippet /****
	   /**** ${1}
	    * ----------------------------------------*/
	${2}
snippet cons
	console.log(${1:''});${2}
snippet mathpi
	Math.PI
snippet {
	{
		${1}
	}
snippet [
	[ ${1} ]
snippet consoleobj
	// "console" object for Legacy Browsers
	if (!console) {
		var console = {
			log: function() {
				var s = '';
				for (var i=0, l=arguments.length; i<l; i++) {
					s += arguments[i];
				}
				alert(s);
			}
		};
	}
snippet $.widget
	$.widget('ui.${1}', {
		options: {
			${2}
		},
		_create: function() {
		}
	});
snippet class
	$.fn.${1:bridge_name} = function (options) {
		var opt = options || {};
		this.each(function (i, element) {
			opt.element = $(element);
			$(element).data('$1', new $2(opt));
		});
		return this;
	};
	function ${2:class_name}() {
		// extend default options
		this.options = {};
		$.extend(this.options, this.defaultOptions, arguments[0]);
		this.element = this.options.element;
		// initialize
		this._create();
	}
	$2.prototype = {
		defaultOptions: {
			element: {}
		},
		_create: function () {

		}
	};
snippet getMax
	function getMax(numArray) {
		var max = 0;
		for (var i=0,l=numArray.length; i<l ; i++) {
			max = Math.max(max, numArray[i]);
		}
		return max;
	}
snippet view
	var ${1:some_class_name} = Backbone.View.extend({
		options: {
		},
		tagName: '',
		className: '',
		id: '',
		events: {
		},
		initialize: function (options) {
			this.opt = {
				
			};
			_.extend(this.opt, options);

			this.render();
		},
		render: function () {
		}
	});
snippet testcase
	TestCase('${1}', {
		setUp: function () {
			
		},
		tearDown: function () {
			
		},
		 ${2}
	});
snippet test
	'test should ${1}': function () {
		${2}
	},
snippet jstdcons
	jstestdriver.console.log(${1:''});${2}
snippet th
	THREE.
snippet nth
	new THREE.
snippet req
	require("${1}");${2}
